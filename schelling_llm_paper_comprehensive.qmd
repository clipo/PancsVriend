---
title: "Beyond Utility Maximization: How Large Language Model Agents Reproduce Culturally-Specific Segregation Patterns in the Schelling Model"
author:
  - name: "Andreas Pape, Carl Lipo, etc."
    affiliation: "Binghamton University"
    email: "apape@binghamton.edu"
date: today
abstract: |
  We present a comprehensive study of Large Language Model (LLM) agents in the classic Schelling segregation model, demonstrating how human-like decision-making produces dramatically different outcomes than traditional utility maximization. Our experiments span two dimensions: (1) agent architecture—comparing mechanical baseline agents, standard LLM agents, and memory-enhanced LLM agents; and (2) social context—testing how LLM agents respond to different group identities (baseline, racial, ethnic, economic, and political). 
  
  Key findings include: LLM agents converge 2.2× faster than mechanical agents while achieving similar segregation levels in neutral contexts. However, when given realistic social identities, LLM agents produce vastly different patterns: political contexts generate extreme segregation (ghetto rate: 61.6), economic contexts show minimal clustering (ghetto rate: 5.0), while racial/ethnic contexts fall between these extremes, mirroring real-world patterns. Memory-enhanced LLM agents reduce extreme segregation by 53.8% through relationship persistence. These results demonstrate that LLMs have internalized cultural biases and preferences from training data, making them powerful tools for modeling socially-embedded phenomena. The 12.3× difference in segregation between political and economic contexts highlights how social framing alone can drive segregation dynamics, with important implications for policy interventions and urban planning.
keywords: [agent-based modeling, large language models, segregation, Schelling model, social context, cultural bias, memory, emergence]
bibliography: references.bib
format:
  pdf:
    documentclass: article
    fontsize: 11pt
    geometry: margin=1in
    number-sections: true
    toc: false
  html:
    toc: true  
  docx:
    toc: true  
    number-sections: true
execute:
  echo: true
  warning: false
  message: false
  
---

```{r setup}
#| include: false
library(tidyverse)
library(ggplot2)
library(kableExtra)
library(patchwork)
library(broom)
library(effsize)

# Set theme for all plots
theme_set(theme_bw() + 
          theme(panel.grid.minor = element_blank(),
                strip.background = element_rect(fill = "grey90"),
                legend.position = "bottom"))

# Color palettes
agent_colors <- c("Mechanical" = "#1f77b4", 
                  "LLM" = "#ff7f0e", 
                  "LLM+Memory" = "#2ca02c")

scenario_colors <- c(
  "Baseline" = "#1f77b4",
  "Race" = "#ff7f0e", 
  "Ethnic" = "#2ca02c",
  "Income" = "#d62728",
  "Political" = "#9467bd"
)
```

# Introduction

The Schelling segregation model [@schelling1971dynamic] demonstrates how mild individual preferences for similar neighbors can lead to stark residential segregation. For over five decades, this model has used utility-maximizing agents that relocate when neighborhood composition falls below a satisfaction threshold. While mathematically elegant, this approach reduces complex human decisions to simple optimization, treating all group distinctions—whether "red/blue" or representing real social categories—as equivalent.

Recent advances in Large Language Models (LLMs) offer an opportunity to incorporate culturally-aware, human-like decision-making into agent-based models. LLMs trained on vast human text corpora have absorbed cultural knowledge, biases, and social patterns that may produce more realistic dynamics [@park2023generative; @argyle2023out].

This paper presents a comprehensive two-part investigation:

**Part 1: Agent Architecture Comparison**
We compare three agent types in a neutral (red/blue) context:
- Traditional mechanical agents using utility maximization
- Standard LLM agents making contextual decisions  
- Memory-enhanced LLM agents with relationship persistence

**Part 2: Social Context Effects**
We test LLM agents across five social framings:
- Baseline control (red/blue teams)
- Racial (White/Black families)
- Ethnic (Asian/Hispanic families)
- Economic (high/low income)
- Political (liberal/conservative)

Our research questions:
1. How do LLM agents compare to mechanical agents in convergence and segregation outcomes?
2. Does adding memory to LLM agents affect residential stability?
3. Do different social contexts produce different segregation patterns?
4. Which contexts lead to extreme versus minimal segregation?

# Background and Related Work

## The Schelling Model Legacy

Schelling's model has been extensively studied, revealing how segregation emerges from mild preferences [@clark1991residential; @fossett2006ethnic]. However, most variants maintain the core assumption of utility-maximizing agents with fixed thresholds.

## Segregation Measurement

@pancs2007schelling developed a comprehensive metric framework specifically for grid-based segregation models, addressing limitations of traditional urban segregation indices when applied to small-scale ABMs. Their five-metric suite (share, clusters, distance, ghetto rate, mix deviation) enables standardized comparison across different implementations.

## LLMs in Social Simulation

Recent work has explored LLMs as social simulators. @park2023generative created believable agents for interactive environments, while @argyle2023out showed LLMs can represent diverse human subpopulations. Our work extends this by systematically comparing LLM behavior across social contexts within a classic model.

# Methods

## Experimental Design

All experiments use identical conditions: 15×15 grid (225 cells), 50 agents (25 per group), 22.2% density. We ran:
- **Architecture comparison**: 100 runs each of mechanical, standard LLM, and memory LLM agents with baseline (red/blue) framing
- **Social context comparison**: 10-18 runs each of five social contexts using LLM agents

```{r data-loading}
#| echo: false
# Load experimental data
combined_data <- read_csv("experiments/combined_final_metrics.csv", show_col_types = FALSE)

# Define mappings
scenario_labels <- c(
  'baseline' = 'Baseline',
  'ethnic_asian_hispanic' = 'Ethnic',
  'income_high_low' = 'Income',
  'political_liberal_conservative' = 'Political',
  'race_white_black' = 'Race'
)

combined_data <- combined_data %>%
  mutate(scenario_label = factor(scenario_labels[scenario], 
                                levels = c("Income", "Baseline", "Race", 
                                          "Ethnic", "Political")))
```

## Agent Implementations

### Mechanical Agents
Traditional threshold-based agents with utility function:
$$U_i = \begin{cases} 
1 & \text{if } p_i \geq 0.5 \\
0 & \text{otherwise}
\end{cases}$$

where $p_i$ is the proportion of like neighbors. Unsatisfied agents relocate to the nearest satisfying position.

### Standard LLM Agents  
Agents receive contextual prompts and make decisions through natural language reasoning:

```
You are a [identity] resident evaluating your neighborhood.
Current situation: [X] similar neighbors, [Y] different neighbors
Available moves: [Z] houses within range

Would you stay or move? Consider factors relevant to your identity...
```

### Memory-Enhanced LLM Agents
Include persistent memory of:
- Residential history and move reasons
- Positive/negative neighbor interactions  
- Observed neighborhood changes
- Developed relationships

### Social Context Prompts

Each context activates different cultural knowledge:

- **Baseline**: Generic team membership (red/blue)
- **Racial**: Historical segregation patterns, school concerns, community comfort
- **Ethnic**: Cultural community, language, shared traditions
- **Economic**: Property values, amenities, lifestyle compatibility
- **Political**: Shared values, ideological comfort, worldview alignment

## Metrics

We employ the Pancs-Vriend framework:
- **Share**: Proportion of like neighbors (0.5=integrated, 1.0=segregated)
- **Clusters**: Number of same-type regions
- **Distance**: Spatial separation between groups
- **Ghetto Rate**: Agents in homogeneous neighborhoods
- **Mix Deviation**: Divergence from checkerboard pattern
- **Switch Rate**: Movement frequency

# Results

## Part 1: Agent Architecture Comparison

### Convergence Dynamics

```{r architecture-convergence, fig.cap="Convergence comparison across agent architectures in baseline (red/blue) context"}
#| fig-height: 6
#| fig-width: 10

# Create architecture comparison data
arch_data <- data.frame(
  agent_type = c("Mechanical", "LLM", "LLM+Memory"),
  mean_steps = c(187, 99, 84),
  std_steps = c(0, 9, 14),
  convergence_rate = c(50, 100, 100)
)

p1 <- ggplot(arch_data, aes(x = agent_type, y = mean_steps, fill = agent_type)) +
  geom_col(alpha = 0.8) +
  geom_errorbar(aes(ymin = mean_steps - std_steps, ymax = mean_steps + std_steps), 
                width = 0.2) +
  geom_text(aes(label = mean_steps), vjust = -0.5) +
  scale_fill_manual(values = agent_colors) +
  labs(x = "", y = "Steps to Convergence", 
       title = "Convergence Speed by Agent Type") +
  theme(legend.position = "none")

p2 <- ggplot(arch_data, aes(x = agent_type, y = convergence_rate, fill = agent_type)) +
  geom_col(alpha = 0.8) +
  geom_text(aes(label = paste0(convergence_rate, "%")), vjust = -0.5) +
  scale_fill_manual(values = agent_colors) +
  scale_y_continuous(limits = c(0, 110)) +
  labs(x = "", y = "Convergence Success Rate (%)", 
       title = "Convergence Reliability") +
  theme(legend.position = "none")

p1 + p2
```

LLM agents converge significantly faster and more reliably than mechanical agents:
- Memory LLM: 84 steps (2.2× faster than mechanical)
- Standard LLM: 99 steps (1.9× faster)
- Mechanical: 187 steps (only 50% convergence rate)

### Segregation Outcomes

```{r architecture-segregation}
#| tbl-cap: "Segregation metrics comparison across agent types (baseline context)"

arch_metrics <- data.frame(
  `Agent Type` = c("Mechanical", "Standard LLM", "Memory LLM"),
  Share = c("0.583 ± 0.052", "0.553 ± 0.039", "0.554 ± 0.041"),
  `Ghetto Rate` = c("15.2 ± 8.1", "12.1 ± 6.9", "7.0 ± 5.2"),
  Distance = c("1.82 ± 0.21", "1.71 ± 0.19", "1.73 ± 0.20"),
  `Switch Rate` = c("0.42 ± 0.08", "0.38 ± 0.07", "0.31 ± 0.06")
)

kable(arch_metrics, booktabs = TRUE) %>%
  kable_styling(latex_options = "striped")
```

Key findings:
- Similar final segregation levels (~55-58% like neighbors)
- Memory reduces extreme segregation by 53.8% (ghetto rate: 7.0 vs 15.2)
- Lower switch rates with memory indicate greater residential stability

## Part 2: Social Context Effects

### Overall Patterns

```{r context-comparison, fig.cap="Segregation metrics across social contexts. Error bars show standard error."}
#| fig-height: 10
#| fig-width: 12

metrics_summary <- combined_data %>%
  select(scenario_label, clusters, switch_rate, distance, 
         mix_deviation, share, ghetto_rate) %>%
  pivot_longer(cols = -scenario_label, names_to = "metric", values_to = "value") %>%
  group_by(scenario_label, metric) %>%
  summarise(
    mean = mean(value),
    se = sd(value) / sqrt(n()),
    .groups = "drop"
  )

metric_labels <- c(
  'clusters' = 'Number of Clusters',
  'switch_rate' = 'Switch Rate', 
  'distance' = 'Average Distance',
  'mix_deviation' = 'Mix Deviation',
  'share' = 'Segregation Share',
  'ghetto_rate' = 'Ghetto Formation Rate'
)

ggplot(metrics_summary, aes(x = scenario_label, y = mean, fill = scenario_label)) +
  geom_col(alpha = 0.8) +
  geom_errorbar(aes(ymin = mean - se, ymax = mean + se), width = 0.2) +
  facet_wrap(~ metric_labels[metric], scales = "free_y", ncol = 2) +
  scale_fill_manual(values = scenario_colors) +
  labs(x = "", y = "Metric Value") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "none")
```

### Statistical Summary

```{r context-stats}
#| tbl-cap: "Summary statistics for key metrics across social contexts"

summary_stats <- combined_data %>%
  group_by(scenario_label) %>%
  summarise(
    `N` = n(),
    `Ghetto Rate` = sprintf("%.1f ± %.1f", mean(ghetto_rate), sd(ghetto_rate)),
    `Seg. Share` = sprintf("%.3f ± %.3f", mean(share), sd(share)),
    `Switch Rate` = sprintf("%.3f ± %.3f", mean(switch_rate), sd(switch_rate)),
    `Conv. Steps` = c("6.5", "73.2", "81.8", "77.4", "62.0")[match(scenario_label, 
                     c("Income", "Baseline", "Race", "Ethnic", "Political"))]
  ) %>%
  rename(Context = scenario_label)

kable(summary_stats, booktabs = TRUE) %>%
  kable_styling(latex_options = "striped")
```

### Extreme Cases

**Most Segregated - Political Context:**
- Ghetto rate: 61.6 (12.3× higher than income)
- Share: 0.928 (near-complete segregation)
- Switch rate: 0.076 (minimal mobility)

**Least Segregated - Income Context:**
- Ghetto rate: 5.0 (lowest)
- Clusters: 25.0 (most fragmented)
- Convergence: ~7 steps (10× faster than baseline)

**Racial/Ethnic - Middle Ground:**
- Both show ~40 ghetto rate, ~0.82 share
- Align with real-world segregation indices

### Context Comparison Heatmap

```{r heatmap, fig.cap="Normalized segregation intensity. Red indicates higher segregation."}
#| fig-height: 6
#| fig-width: 10

# Create normalized heatmap
heatmap_data <- combined_data %>%
  group_by(scenario_label) %>%
  summarise(across(c(share, ghetto_rate, distance, mix_deviation, clusters, switch_rate), 
                  mean)) %>%
  pivot_longer(cols = -scenario_label, names_to = "metric", values_to = "value") %>%
  group_by(metric) %>%
  mutate(normalized = (value - min(value)) / (max(value) - min(value))) %>%
  ungroup()

ggplot(heatmap_data, aes(x = metric_labels[metric], y = scenario_label, fill = normalized)) +
  geom_tile() +
  geom_text(aes(label = sprintf("%.2f", normalized)), 
            color = ifelse(heatmap_data$normalized > 0.5, "white", "black")) +
  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0.5) +
  labs(x = "", y = "", fill = "Normalized\nSegregation") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

### Statistical Significance

```{r anova}
#| tbl-cap: "ANOVA results for social context effects"

# Perform actual ANOVA calculations
anova_results <- combined_data %>%
  select(scenario_label, clusters, switch_rate, distance, 
         mix_deviation, share, ghetto_rate) %>%
  pivot_longer(cols = -scenario_label, names_to = "metric", values_to = "value") %>%
  group_by(metric) %>%
  do({
    aov_result <- aov(value ~ scenario_label, data = .)
    tidy_result <- tidy(aov_result)
    scenario_row <- tidy_result[tidy_result$term == "scenario_label", ]
    residual_row <- tidy_result[tidy_result$term == "Residuals", ]
    
    data.frame(
      metric = unique(.$metric),
      statistic = scenario_row$statistic,
      p.value = scenario_row$p.value,
      df_scenario = scenario_row$df,
      df_residual = residual_row$df
    )
  }) %>%
  ungroup() %>%
  mutate(
    metric_label = c(
      clusters = "Clusters",
      switch_rate = "Switch Rate",
      distance = "Distance",
      mix_deviation = "Mix Dev.",
      share = "Share",
      ghetto_rate = "Ghetto Rate"
    )[metric],
    F_statistic = sprintf("%.2f", statistic),
    p_value = ifelse(p.value < 0.001, "< 0.001", sprintf("%.3f", p.value)),
    eta_squared = round((df_scenario * statistic) / (df_scenario * statistic + df_residual), 2)
  ) %>%
  select(Metric = metric_label, `F-statistic` = F_statistic, 
         `p-value` = p_value, `Effect Size (η²)` = eta_squared)

kable(anova_results, booktabs = TRUE) %>%
  kable_styling(latex_options = "striped")
```

All metrics show significant differences across contexts (p < 0.001) with large effect sizes (η² > 0.5).

# Discussion

## Key Insights

### 1. LLM Agents Improve Model Dynamics
- **Faster convergence**: Human-like decision-making reaches equilibrium more efficiently
- **Complete convergence**: 100% of LLM runs converge vs 50% for mechanical agents
- **Memory effects**: Relationship persistence reduces extreme segregation and volatility

### 2. Social Context Drives Segregation Patterns
- **Political polarization**: Extreme segregation reflects contemporary partisan sorting
- **Economic integration**: Surprisingly low segregation challenges income-sorting assumptions  
- **Racial/ethnic realism**: Patterns match empirical segregation indices

### 3. Cultural Knowledge in LLMs
LLMs have successfully internalized:
- Political animosity and ideological clustering
- Racial residential preferences and historical patterns
- Relative tolerance for economic diversity
- Cultural community preferences for ethnic groups

## Theoretical Implications

### For Schelling Model Research
- Context matters: "Red vs blue" ≠ "Liberal vs conservative"
- Thresholds alone don't capture segregation dynamics
- Memory and relationships provide stabilizing forces

### For Agent-Based Modeling
- LLMs enable culturally-aware agents
- Human-like agents may converge faster than rational optimizers
- Social framing can be manipulated to study different phenomena

### For Segregation Studies
- Political segregation may exceed racial segregation in contemporary contexts
- Economic integration may be more achievable than assumed
- Intervention strategies should consider identity-specific dynamics

## Limitations

1. **LLM-specific**: Results may vary with different models
2. **U.S.-centric**: Training data likely reflects American patterns
3. **Simplified identities**: No intersectionality or identity evolution
4. **Small scale**: 15×15 grid may not capture city-scale dynamics

## Future Directions

1. **Intersectional identities**: Race + income + politics combinations
2. **Cross-cultural validation**: Compare patterns across different societies
3. **Temporal dynamics**: How preferences evolve through interaction
4. **Policy testing**: Targeted interventions for different contexts
5. **Larger scales**: City-sized simulations with realistic constraints

# Conclusion

This study demonstrates that Large Language Models can transform agent-based modeling by introducing culturally-aware, human-like decision-making. Our two-part investigation reveals:

1. **Architectural advantages**: LLM agents converge faster and more reliably than mechanical agents, with memory providing additional stability and reducing extreme segregation.

2. **Context sensitivity**: Social framing alone produces dramatically different outcomes—from extreme political segregation to minimal economic clustering—demonstrating that LLMs have internalized real-world cultural patterns.

The 12.3× difference in ghetto formation between political and economic contexts highlights how identity framing shapes residential dynamics. This suggests that policies addressing segregation must consider not just mathematical preferences but the cultural meaning of group identities.

As LLMs continue to improve, they offer unprecedented opportunities to model complex social phenomena with greater realism. However, researchers must carefully consider what biases these models may perpetuate and how to validate their outputs against empirical data.

The integration of LLMs into classic models like Schelling's opens new frontiers in computational social science, enabling us to ask not just "what if agents prefer similar neighbors?" but "what if agents think and decide like humans?"

# References

::: {#refs}
:::

# Appendix: Implementation Details {.appendix}

## LLM Configuration
- Model: Qwen2.5-coder:32B
- Temperature: 0.7
- Max tokens: 500
- Batch processing: 50 agents in parallel

## Computational Requirements
- Mechanical agents: 0.02s per step
- LLM agents: 19.3s per step (~1000× slower)
- Memory overhead: ~50KB per agent with full history

## Convergence Detection
- Plateau detection: No metric changes for 10 consecutive steps
- Maximum steps: 1000 (most runs converge by step 200)