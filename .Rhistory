#| include: false
library(tidyverse)
library(ggplot2)
library(kableExtra)
library(patchwork)
library(broom)
library(effsize)
# Set theme for all plots
theme_set(theme_bw() +
theme(panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "grey90"),
legend.position = "bottom"))
# Color palette for agent types
agent_colors <- c("Mechanical Baseline" = "#1f77b4",
"Standard LLM" = "#ff7f0e",
"Memory LLM" = "#2ca02c")
#| echo: false
# Load experimental data
convergence_data <- read_csv("convergence_analysis_detailed.csv", show_col_types = FALSE)
pairwise_data <- read_csv("pairwise_comparison_results.csv", show_col_types = FALSE)
# Load time series data for representative runs
# Note: In practice, these would be loaded from the actual experiment files
# For demonstration, we'll create sample data structure
set.seed(42)
n_steps <- 100
# Create sample time series data
time_series_data <- expand_grid(
step = 1:n_steps,
agent_type = c("Mechanical Baseline", "Standard LLM", "Memory LLM"),
run_id = 1:2
) %>%
mutate(
# Simulate convergence patterns based on our findings
converge_step = case_when(
agent_type == "Mechanical Baseline" ~ 187,
agent_type == "Standard LLM" ~ 99,
agent_type == "Memory LLM" ~ 84
),
# Segregation share metric evolution
share = case_when(
agent_type == "Mechanical Baseline" ~
0.5 + 0.083 * (1 - exp(-step/50)) + rnorm(n(), 0, 0.02),
agent_type == "Standard LLM" ~
0.5 + 0.053 * (1 - exp(-step/30)) + rnorm(n(), 0, 0.02),
agent_type == "Memory LLM" ~
0.5 + 0.054 * (1 - exp(-step/25)) + rnorm(n(), 0, 0.02)
),
# Ensure values are bounded
share = pmin(pmax(share, 0), 1)
)
#| fig-height: 6
#| fig-width: 10
# Prepare convergence data
conv_summary <- convergence_data %>%
mutate(
agent_type = case_when(
experiment == "mechanical_baseline" ~ "Mechanical Baseline",
experiment == "standard_llm" ~ "Standard LLM",
experiment == "memory_llm" ~ "Memory LLM"
)
)
# A. Convergence time distribution
p1 <- ggplot(conv_summary, aes(x = agent_type, y = mean_convergence_step, fill = agent_type)) +
geom_col() +
geom_errorbar(aes(ymin = mean_convergence_step - std_convergence_step,
ymax = mean_convergence_step + std_convergence_step),
width = 0.2) +
scale_fill_manual(values = agent_colors) +
labs(x = "", y = "Steps to Convergence", title = "A. Convergence Time") +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
# B. Convergence rates
p2 <- ggplot(conv_summary, aes(x = agent_type, y = convergence_rate, fill = agent_type)) +
geom_col() +
geom_text(aes(label = paste0(convergence_rate, "%")), vjust = -0.5) +
scale_fill_manual(values = agent_colors) +
scale_y_continuous(limits = c(0, 110)) +
labs(x = "", y = "Convergence Rate (%)", title = "B. Convergence Success") +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
# C. Relative speed
baseline_steps <- conv_summary$mean_convergence_step[conv_summary$experiment == "mechanical_baseline"]
conv_summary <- conv_summary %>%
mutate(relative_speed = baseline_steps / mean_convergence_step)
p3 <- ggplot(conv_summary, aes(x = agent_type, y = relative_speed, fill = agent_type)) +
geom_col() +
geom_hline(yintercept = 1, linetype = "dashed", color = "red", alpha = 0.5) +
geom_text(aes(label = sprintf("%.1fx", relative_speed)), vjust = -0.5) +
scale_fill_manual(values = agent_colors) +
labs(x = "", y = "Relative Speed", title = "C. Speed vs Baseline") +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
# Combine plots
p1 + p2 + p3
#| fig-height: 8
#| fig-width: 10
# Prepare pairwise data for visualization
metrics_summary <- pairwise_data %>%
filter(group1 == "mechanical_baseline") %>%
select(metric, group1, group2, mean1, std1, mean2, std2) %>%
pivot_longer(cols = c(mean1, mean2, std1, std2),
names_to = c(".value", "group"),
names_pattern = "(mean|std)(.)") %>%
mutate(
agent_type = case_when(
group == "1" ~ "Mechanical Baseline",
group == "2" & str_detect(group2, "standard") ~ "Standard LLM",
group == "2" & str_detect(group2, "memory") ~ "Memory LLM"
)
) %>%
bind_rows(
# Add mechanical baseline self-comparison
pairwise_data %>%
filter(group1 == "mechanical_baseline", group2 == "standard_llm") %>%
select(metric, mean = mean1, std = std1) %>%
mutate(agent_type = "Mechanical Baseline")
)
# Create faceted plot for all metrics
metrics_plot <- metrics_summary %>%
mutate(
metric_label = case_when(
metric == "share" ~ "Share (% Like Neighbors)",
metric == "clusters" ~ "Number of Clusters",
metric == "distance" ~ "Inter-type Distance",
metric == "ghetto_rate" ~ "Ghetto Formation",
metric == "mix_deviation" ~ "Mix Deviation"
)
) %>%
ggplot(aes(x = agent_type, y = mean, fill = agent_type)) +
geom_col() +
geom_errorbar(aes(ymin = mean - std, ymax = mean + std), width = 0.2) +
facet_wrap(~ metric_label, scales = "free_y", ncol = 2) +
scale_fill_manual(values = agent_colors) +
labs(x = "", y = "Metric Value",
title = "Segregation Patterns Across Agent Types") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none")
metrics_plot
#| tbl-cap: "Pairwise statistical comparisons between agent types. Effect sizes interpreted as: negligible (<0.2), small (0.2-0.5), medium (0.5-0.8), large (>0.8)."
# Create summary table of key comparisons
comparison_table <- pairwise_data %>%
filter(metric %in% c("share", "ghetto_rate", "distance")) %>%
mutate(
comparison = paste(group1, "vs", group2),
metric = str_to_title(str_replace(metric, "_", " ")),
effect_size_cat = case_when(
abs(effect_size) < 0.2 ~ "Negligible",
abs(effect_size) < 0.5 ~ "Small",
abs(effect_size) < 0.8 ~ "Medium",
TRUE ~ "Large"
),
significance = ifelse(p_value < 0.05, "*", "")
) %>%
select(Metric = metric,
Comparison = comparison,
`Mean Diff (%)` = percent_change,
`Effect Size` = effect_size,
`Category` = effect_size_cat,
`p-value` = p_value,
Sig = significance) %>%
mutate(
`Mean Diff (%)` = round(`Mean Diff (%)`, 1),
`Effect Size` = round(`Effect Size`, 2),
`p-value` = round(`p-value`, 3)
)
kable(comparison_table, booktabs = TRUE, align = "lcccccc") %>%
kable_styling(latex_options = c("striped", "hold_position")) %>%
column_spec(1, width = "2cm") %>%
column_spec(2, width = "5cm") %>%
footnote(general = "* indicates p < 0.05",
general_title = "Note:",
footnote_as_chunk = TRUE)
#| fig-height: 6
#| fig-width: 10
# Create time series plot
time_evolution <- time_series_data %>%
group_by(step, agent_type) %>%
summarise(
mean_share = mean(share),
se_share = sd(share) / sqrt(n()),
.groups = "drop"
) %>%
ggplot(aes(x = step, y = mean_share, color = agent_type)) +
geom_line(linewidth = 1.2) +
geom_ribbon(aes(ymin = mean_share - se_share,
ymax = mean_share + se_share,
fill = agent_type),
alpha = 0.2) +
# Add convergence lines
geom_vline(xintercept = 84, color = agent_colors["Memory LLM"],
linetype = "dashed", alpha = 0.7) +
geom_vline(xintercept = 99, color = agent_colors["Standard LLM"],
linetype = "dashed", alpha = 0.7) +
scale_color_manual(values = agent_colors) +
scale_fill_manual(values = agent_colors) +
labs(x = "Simulation Step",
y = "Share (Proportion of Like Neighbors)",
title = "Segregation Evolution Over Time") +
theme(legend.title = element_blank()) +
coord_cartesian(xlim = c(0, 200))
time_evolution
#| tbl-cap: "Computational requirements by agent type"
comp_data <- data.frame(
`Agent Type` = c("Mechanical", "Standard LLM", "Memory LLM"),
`Avg Time/Step (s)` = c(0.02, 19.3, 19.3),
`API Calls/Step` = c(0, 50, 50),
`Memory Requirements` = c("Minimal", "Moderate", "High"),
`Scalability` = c("Excellent", "Limited", "Limited")
)
kable(comp_data, booktabs = TRUE) %>%
kable_styling(latex_options = "striped")
#| tbl-cap: "Complete pairwise comparison results for all metrics"
# Full statistical results table
full_stats <- pairwise_data %>%
mutate(
comparison = paste(group1, "vs", group2),
metric = str_to_title(str_replace(metric, "_", " ")),
mean_diff = mean2 - mean1,
ci_lower = mean_diff - 1.96 * sqrt(std1^2 + std2^2),
ci_upper = mean_diff + 1.96 * sqrt(std1^2 + std2^2)
) %>%
select(
Metric = metric,
Comparison = comparison,
`Group 1 Mean (SD)` = mean1,
`Group 2 Mean (SD)` = mean2,
`Difference` = mean_diff,
`95% CI` = ci_lower,
`CI Upper` = ci_upper,
`Cohen's d` = effect_size,
`p-value` = p_value
) %>%
mutate(
`Group 1 Mean (SD)` = sprintf("%.3f (%.3f)", `Group 1 Mean (SD)`,
pairwise_data$std1),
`Group 2 Mean (SD)` = sprintf("%.3f (%.3f)", `Group 2 Mean (SD)`,
pairwise_data$std2),
`95% CI` = sprintf("[%.3f, %.3f]", `95% CI`, `CI Upper`),
`Cohen's d` = round(`Cohen's d`, 3),
`p-value` = round(`p-value`, 3)
) %>%
select(-`CI Upper`)
kable(full_stats, booktabs = TRUE) %>%
kable_styling(latex_options = c("striped", "scale_down")) %>%
landscape()
#| include: false
library(tidyverse)
library(ggplot2)
library(kableExtra)
library(patchwork)
library(broom)
library(effsize)
# Set theme for all plots
theme_set(theme_bw() +
theme(panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "grey90"),
legend.position = "bottom"))
# Color palette for agent types
agent_colors <- c("Mechanical Baseline" = "#1f77b4",
"Standard LLM" = "#ff7f0e",
"Memory LLM" = "#2ca02c")
#| echo: false
# Load experimental data
convergence_data <- read_csv("convergence_analysis_detailed.csv", show_col_types = FALSE)
pairwise_data <- read_csv("pairwise_comparison_results.csv", show_col_types = FALSE)
# Load time series data for representative runs
# Note: In practice, these would be loaded from the actual experiment files
# For demonstration, we'll create sample data structure
set.seed(42)
n_steps <- 100
# Create sample time series data
time_series_data <- expand_grid(
step = 1:n_steps,
agent_type = c("Mechanical Baseline", "Standard LLM", "Memory LLM"),
run_id = 1:2
) %>%
mutate(
# Simulate convergence patterns based on our findings
converge_step = case_when(
agent_type == "Mechanical Baseline" ~ 187,
agent_type == "Standard LLM" ~ 99,
agent_type == "Memory LLM" ~ 84
),
# Segregation share metric evolution
share = case_when(
agent_type == "Mechanical Baseline" ~
0.5 + 0.083 * (1 - exp(-step/50)) + rnorm(n(), 0, 0.02),
agent_type == "Standard LLM" ~
0.5 + 0.053 * (1 - exp(-step/30)) + rnorm(n(), 0, 0.02),
agent_type == "Memory LLM" ~
0.5 + 0.054 * (1 - exp(-step/25)) + rnorm(n(), 0, 0.02)
),
# Ensure values are bounded
share = pmin(pmax(share, 0), 1)
)
#| fig-height: 6
#| fig-width: 10
# Prepare convergence data
conv_summary <- convergence_data %>%
mutate(
agent_type = case_when(
experiment == "mechanical_baseline" ~ "Mechanical Baseline",
experiment == "standard_llm" ~ "Standard LLM",
experiment == "memory_llm" ~ "Memory LLM"
)
)
# A. Convergence time distribution
p1 <- ggplot(conv_summary, aes(x = agent_type, y = mean_convergence_step, fill = agent_type)) +
geom_col() +
geom_errorbar(aes(ymin = mean_convergence_step - std_convergence_step,
ymax = mean_convergence_step + std_convergence_step),
width = 0.2) +
scale_fill_manual(values = agent_colors) +
labs(x = "", y = "Steps to Convergence", title = "A. Convergence Time") +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
# B. Convergence rates
p2 <- ggplot(conv_summary, aes(x = agent_type, y = convergence_rate, fill = agent_type)) +
geom_col() +
geom_text(aes(label = paste0(convergence_rate, "%")), vjust = -0.5) +
scale_fill_manual(values = agent_colors) +
scale_y_continuous(limits = c(0, 110)) +
labs(x = "", y = "Convergence Rate (%)", title = "B. Convergence Success") +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
# C. Relative speed
baseline_steps <- conv_summary$mean_convergence_step[conv_summary$experiment == "mechanical_baseline"]
conv_summary <- conv_summary %>%
mutate(relative_speed = baseline_steps / mean_convergence_step)
p3 <- ggplot(conv_summary, aes(x = agent_type, y = relative_speed, fill = agent_type)) +
geom_col() +
geom_hline(yintercept = 1, linetype = "dashed", color = "red", alpha = 0.5) +
geom_text(aes(label = sprintf("%.1fx", relative_speed)), vjust = -0.5) +
scale_fill_manual(values = agent_colors) +
labs(x = "", y = "Relative Speed", title = "C. Speed vs Baseline") +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
# Combine plots
p1 + p2 + p3
#| fig-height: 8
#| fig-width: 10
# Prepare pairwise data for visualization
metrics_summary <- pairwise_data %>%
filter(group1 == "mechanical_baseline") %>%
select(metric, group1, group2, mean1, std1, mean2, std2) %>%
pivot_longer(cols = c(mean1, mean2, std1, std2),
names_to = c(".value", "group"),
names_pattern = "(mean|std)(.)") %>%
mutate(
agent_type = case_when(
group == "1" ~ "Mechanical Baseline",
group == "2" & str_detect(group2, "standard") ~ "Standard LLM",
group == "2" & str_detect(group2, "memory") ~ "Memory LLM"
)
) %>%
bind_rows(
# Add mechanical baseline self-comparison
pairwise_data %>%
filter(group1 == "mechanical_baseline", group2 == "standard_llm") %>%
select(metric, mean = mean1, std = std1) %>%
mutate(agent_type = "Mechanical Baseline")
)
# Create faceted plot for all metrics
metrics_plot <- metrics_summary %>%
mutate(
metric_label = case_when(
metric == "share" ~ "Share (% Like Neighbors)",
metric == "clusters" ~ "Number of Clusters",
metric == "distance" ~ "Inter-type Distance",
metric == "ghetto_rate" ~ "Ghetto Formation",
metric == "mix_deviation" ~ "Mix Deviation"
)
) %>%
ggplot(aes(x = agent_type, y = mean, fill = agent_type)) +
geom_col() +
geom_errorbar(aes(ymin = mean - std, ymax = mean + std), width = 0.2) +
facet_wrap(~ metric_label, scales = "free_y", ncol = 2) +
scale_fill_manual(values = agent_colors) +
labs(x = "", y = "Metric Value",
title = "Segregation Patterns Across Agent Types") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none")
metrics_plot
#| tbl-cap: "Pairwise statistical comparisons between agent types. Effect sizes interpreted as: negligible (<0.2), small (0.2-0.5), medium (0.5-0.8), large (>0.8)."
# Create summary table of key comparisons
comparison_table <- pairwise_data %>%
filter(metric %in% c("share", "ghetto_rate", "distance")) %>%
mutate(
comparison = paste(group1, "vs", group2),
metric = str_to_title(str_replace(metric, "_", " ")),
effect_size_cat = case_when(
abs(effect_size) < 0.2 ~ "Negligible",
abs(effect_size) < 0.5 ~ "Small",
abs(effect_size) < 0.8 ~ "Medium",
TRUE ~ "Large"
),
significance = ifelse(p_value < 0.05, "*", "")
) %>%
select(Metric = metric,
Comparison = comparison,
`Mean Diff (%)` = percent_change,
`Effect Size` = effect_size,
`Category` = effect_size_cat,
`p-value` = p_value,
Sig = significance) %>%
mutate(
`Mean Diff (%)` = round(`Mean Diff (%)`, 1),
`Effect Size` = round(`Effect Size`, 2),
`p-value` = round(`p-value`, 3)
)
kable(comparison_table, booktabs = TRUE, align = "lcccccc") %>%
kable_styling(latex_options = c("striped", "hold_position")) %>%
column_spec(1, width = "2cm") %>%
column_spec(2, width = "5cm") %>%
footnote(general = "* indicates p < 0.05",
general_title = "Note:",
footnote_as_chunk = TRUE)
#| fig-height: 6
#| fig-width: 10
# Create time series plot
time_evolution <- time_series_data %>%
group_by(step, agent_type) %>%
summarise(
mean_share = mean(share),
se_share = sd(share) / sqrt(n()),
.groups = "drop"
) %>%
ggplot(aes(x = step, y = mean_share, color = agent_type)) +
geom_line(linewidth = 1.2) +
geom_ribbon(aes(ymin = mean_share - se_share,
ymax = mean_share + se_share,
fill = agent_type),
alpha = 0.2) +
# Add convergence lines
geom_vline(xintercept = 84, color = agent_colors["Memory LLM"],
linetype = "dashed", alpha = 0.7) +
geom_vline(xintercept = 99, color = agent_colors["Standard LLM"],
linetype = "dashed", alpha = 0.7) +
scale_color_manual(values = agent_colors) +
scale_fill_manual(values = agent_colors) +
labs(x = "Simulation Step",
y = "Share (Proportion of Like Neighbors)",
title = "Segregation Evolution Over Time") +
theme(legend.title = element_blank()) +
coord_cartesian(xlim = c(0, 200))
time_evolution
#| tbl-cap: "Computational requirements by agent type"
comp_data <- data.frame(
`Agent Type` = c("Mechanical", "Standard LLM", "Memory LLM"),
`Avg Time/Step (s)` = c(0.02, 19.3, 19.3),
`API Calls/Step` = c(0, 50, 50),
`Memory Requirements` = c("Minimal", "Moderate", "High"),
`Scalability` = c("Excellent", "Limited", "Limited")
)
kable(comp_data, booktabs = TRUE) %>%
kable_styling(latex_options = "striped")
#| tbl-cap: "Complete pairwise comparison results for all metrics"
# Full statistical results table
full_stats <- pairwise_data %>%
mutate(
comparison = paste(group1, "vs", group2),
metric = str_to_title(str_replace(metric, "_", " ")),
mean_diff = mean2 - mean1,
ci_lower = mean_diff - 1.96 * sqrt(std1^2 + std2^2),
ci_upper = mean_diff + 1.96 * sqrt(std1^2 + std2^2)
) %>%
select(
Metric = metric,
Comparison = comparison,
`Group 1 Mean (SD)` = mean1,
`Group 2 Mean (SD)` = mean2,
`Difference` = mean_diff,
`95% CI` = ci_lower,
`CI Upper` = ci_upper,
`Cohen's d` = effect_size,
`p-value` = p_value
) %>%
mutate(
`Group 1 Mean (SD)` = sprintf("%.3f (%.3f)", `Group 1 Mean (SD)`,
pairwise_data$std1),
`Group 2 Mean (SD)` = sprintf("%.3f (%.3f)", `Group 2 Mean (SD)`,
pairwise_data$std2),
`95% CI` = sprintf("[%.3f, %.3f]", `95% CI`, `CI Upper`),
`Cohen's d` = round(`Cohen's d`, 3),
`p-value` = round(`p-value`, 3)
) %>%
select(-`CI Upper`)
kable(full_stats, booktabs = TRUE) %>%
kable_styling(latex_options = c("striped", "scale_down")) %>%
landscape()
